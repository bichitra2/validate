from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.serialization import load_pem_private_key
from cryptography.x509 import load_pem_x509_certificate
from cryptography.exceptions import InvalidSignature

def validate_certificate_and_secret(certificate_file, secret):
    # Load the certificate
    with open(certificate_file, "rb") as file:
        certificate_data = file.read()
    certificate = load_pem_x509_certificate(certificate_data, default_backend())

    # Validate the certificate
    try:
        certificate.public_key().verify(
            certificate.signature,
            certificate.tbs_certificate_bytes,
            default_backend().padding.PKCS1v15(),
            certificate.signature_hash_algorithm,
        )
        print("Certificate is valid.")
    except InvalidSignature:
        print("Certificate validation failed.")

    # Validate the secret
    try:
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
            backend=default_backend()
        )
        private_key.sign(secret, default_backend().padding.PKCS1v15(), private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption(),
        ))
        print("Secret is valid.")
    except InvalidSignature:
        print("Secret validation failed.")

# Example usage
certificate_file = "path/to/certificate.crt"
secret_to_validate = b"This is the secret to validate"

validate_certificate_and_secret(certificate_file, secret_to_validate)
